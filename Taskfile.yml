# Copyright (c) 2023 Tim <tbckr>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# SPDX-License-Identifier: MIT

# https://taskfile.dev

version: '3'

env:
  GO111MODULE: on
  GOPROXY: https://proxy.golang.org,direct
  GOSUMDB: sum.golang.org

vars:
  DOCKER: '{{default "docker" .DOCKER}}'

tasks:
  setup:validate:
    desc: Validate that all necessary devtools are installed
    cmds:
      - which go 1>/dev/null || (echo "go is not installed" && exit 1)
      - which docker 1>/dev/null || (echo "docker is not installed" && exit 1)

  setup:hooks:
    desc: Setup git hooks
    preconditions:
      - which pre-commit
    cmds:
      - pre-commit install --hook-type commit-msg --hook-type pre-commit

  setup:
    desc: Setup development environment
    cmds:
      - task: setup:hooks

  docs:
    desc: Start documentation server
    cmds:
      - "{{.DOCKER}} run --rm -it -p 8000:8000 -v $PWD:/docs:ro --pull=always squidfunk/mkdocs-material"

  license-header:
    desc: Add license header to all files
    aliases:
      - "license"
    cmds:
      - |
        addlicense -c "Tim <tbckr>" -l MIT -s -v \
        -ignore "dist/**" \
        -ignore ".idea/**" \
        -ignore ".task/**" \
        -ignore ".github/licenses.tmpl" \
        -ignore "licenses/*" \
        -ignore "venv/*" \
        .

  clean:
    desc: Clean up
    cmds:
      - rm -rf dist/
      - rm -rf coverage.txt
      - rm -rf sgpt

  prepare:
    desc: Install dependencies
    cmds:
      - go mod tidy

  build:
    desc: Build the binary
    sources:
      - ./**/*.go
    generates:
      - ./sgpt
    cmds:
      - go build -o sgpt cmd/sgpt/main.go

  test:
    desc: Run tests
    env:
      LC_ALL: C
    vars:
      TEST_OPTIONS: '{{default "" .TEST_OPTIONS}}'
      SOURCE_FILES: '{{default "./..." .SOURCE_FILES}}'
      TEST_PATTERN: '{{default "." .TEST_PATTERN}}'
    cmds:
      - go test {{.TEST_OPTIONS}} -failfast -race -coverpkg=./... -covermode=atomic -coverprofile=coverage.txt {{.SOURCE_FILES}} -run {{.TEST_PATTERN}} -timeout=5m

  cover:
    desc: Open the cover tool
    cmds:
      - go tool cover -html=coverage.txt

  fmt:
    desc: gofumpt all code
    cmds:
      - gofumpt -w -l .

  lint:
    desc: Lint the code
    cmds:
      - task: lint:go
      - task: lint:md

  lint:go:
    desc: Lint the code with golangci-lint
    cmds:
      - golangci-lint run ./...

  lint:md:
    desc: Lint markdown files
    cmds:
      - docker run --rm --pull always -v $(pwd):/app:ro ghcr.io/tbckr/markdownlint:18 . --config=.mdl_config.yaml

  ci:
    desc: Run all CI steps
    cmds:
      - task: clean
      - task: prepare
      - task: build
      - task: test

  default:
    desc: Runs the default tasks
    cmds:
      - task: ci

  docker:build:base:
    desc: Build a docker image
    internal: true
    cmds:
      - "{{.DOCKER}} build --pull --platform {{.OS}}/{{.Platform}} --build-arg TARGETOS={{.OS}} --build-arg TARGETARCH={{.Platform}}{{with .Variant}} --build-arg TARGETVARIANT={{.}}{{end}} -t sgpt:latest ."

  docker:build:linux-amd64:
    desc: Build the linux/amd64 docker image
    cmds:
      - task: docker:build:base
        vars:
          OS: 'linux'
          Platform: 'amd64'

  docker:build:
    desc: Build docker image
    cmds:
      - task: docker:build:linux-amd64

  release:
    desc: Create a new tag
    aliases:
      - r
    vars:
      NEXT:
        sh: svu n
    cmds:
      - task: version:set
        vars:
          VERSION: '{{.NEXT}}'
      - git push
      - git tag {{.NEXT}}
      - git push --tags

  version:wip:
    desc: Increment the version in the code - used to create a pre-release.
    aliases:
      - wip
    vars:
      NEXT:
        sh: svu n --pre-release=PRE-RELEASE
    cmds:
      - task: version:set
        vars:
          VERSION: '{{.NEXT}}'

  version:set:
    desc: Set the release version in the code
    internal: true
    cmds:
      - sed -i 's/\(version\s*=\s*\)".*"/\1"'"{{.VERSION}}"'"/' internal/buildinfo/version.go
      - git add internal/buildinfo/version.go
      - "git commit -m \"chore: Bump version to {{.VERSION}}\""

  sgpt:test:pkg:
    desc: Test a package
    internal: true
    cmds:
      - "docker run --platform linux/{{.Platform}} --rm --workdir /tmp -v $PWD/dist:/tmp {{.Image}} sh -c '{{.Cmd}} && sgpt version'"

  renovate:debug:
    desc: Run the current renovate configuration in debug mode
    vars:
      Repo:
        sh: git remote get-url origin | cut -d':' -f2 | sed 's/\.git//'
    cmds:
      - docker run --rm -v $(pwd):/usr/src/app:ro -e LOG_LEVEL=debug -e RENOVATE_CONFIG_FILE=renovate.json -e RENOVATE_TOKEN=${GITHUB_TOKEN} renovate/renovate:35 --dry-run {{.Repo}}

  sgpt:test:rpm:
    desc: Tests rpm packages
    vars:
      rpm: 'rpm --nodeps -ivh'
    cmds:
      - task: sgpt:test:pkg
        vars:
          Platform: '386'
          Image: centos:centos7
          Cmd: '{{.rpm}} sgpt-*.i386.rpm'
      - task: sgpt:test:pkg
        vars:
          Platform: 'amd64'
          Image: fedora
          Cmd: '{{.rpm}} sgpt-*.x86_64.rpm'
      - task: sgpt:test:pkg
        vars:
          Platform: 'arm64'
          Image: fedora
          Cmd: '{{.rpm}} sgpt-*.aarch64.rpm'

  sgpt:test:deb:
    desc: Tests deb packages
    vars:
      dpkg: 'dpkg -i'
    cmds:
      - task: sgpt:test:pkg
        vars:
          Platform: 'amd64'
          Image: ubuntu
          Cmd: '{{.dpkg}} sgpt*_amd64.deb'
      - task: sgpt:test:pkg
        vars:
          Platform: 'arm64'
          Image: ubuntu
          Cmd: '{{.dpkg}} sgpt*_arm64.deb'
      - task: sgpt:test:pkg
        vars:
          Platform: 'arm/7'
          Image: ubuntu
          Cmd: '{{.dpkg}} sgpt*_armhf.deb'

  sgpt:test:apk:
    desc: Tests apk packages
    vars:
      apk: 'apk add --allow-untrusted -U'
    cmds:
      - task: sgpt:test:pkg
        vars:
          Platform: '386'
          Image: alpine
          Cmd: '{{.apk}} sgpt*_x86.apk'
      - task: sgpt:test:pkg
        vars:
          Platform: 'amd64'
          Image: alpine
          Cmd: '{{.apk}} sgpt*_x86_64.apk'
      - task: sgpt:test:pkg
        vars:
          Platform: 'arm64'
          Image: alpine
          Cmd: '{{.apk}} sgpt*_aarch64.apk'
      - task: sgpt:test:pkg
        vars:
          Platform: 'arm/7'
          Image: alpine
          Cmd: '{{.apk}} sgpt*_armv7.apk'

  sgpt:test:
    desc: Test built linux packages
    cmds:
      - task: sgpt:test:apk
      - task: sgpt:test:deb
      - task: sgpt:test:rpm
