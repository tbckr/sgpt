before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy

env:
  - GITHUB_REPO=tbckr/sgpt
  - IMAGE_NAME=ghcr.io/tbckr/sgpt

builds:
  - env:
      - CGO_ENABLED=0
    main: ./cmd/sgpt
    binary: sgpt
    goos:
      - linux
      - windows
      - darwin
    goarm:
      - 7
    ldflags:
      - -X 'sgpt.Version={{.Version}}'

dockers:
  -
    id: "linux-amd64"
    goos: linux
    goarch: amd64
    use: buildx
    dockerfile: "Dockerfile.goreleaser"
    image_templates:
    - "{{.Env.IMAGE_NAME}}:latest-amd64"
    - "{{.Env.IMAGE_NAME}}:{{ .Major }}-amd64"
    - "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}-amd64"
    - "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}.{{.Patch}}-amd64"
    # Template of the docker build flags.
    build_flag_templates:
    - "--pull"
    - "--platform=linux/amd64"
    - "--label=org.opencontainers.image.created={{.Date}}"
    - "--label=org.opencontainers.image.title={{.ProjectName}}"
    - "--label=org.opencontainers.image.revision={{.FullCommit}}"
    - "--label=org.opencontainers.image.version={{.Version}}"
    - "--label=org.opencontainers.image.description={{ .ProjectName }}"
    - "--label=org.opencontainers.image.url=https://github.com/tbckr/{{ .ProjectName }}"
    - "--label=org.opencontainers.image.source=https://github.com/tbckr/{{ .ProjectName }}"
    - "--label=org.opencontainers.image.licenses=MIT"
  -
    id: "linux-arm64"
    goos: linux
    goarch: arm64
    use: buildx
    dockerfile: "Dockerfile.goreleaser"
    image_templates:
    - "{{.Env.IMAGE_NAME}}:latest-arm64"
    - "{{.Env.IMAGE_NAME}}:{{ .Major }}-arm64"
    - "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}-arm64"
    - "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}.{{.Patch}}-arm64"
    # Template of the docker build flags.
    build_flag_templates:
    - "--pull"
    - "--platform=linux/arm64"
    - "--label=org.opencontainers.image.created={{.Date}}"
    - "--label=org.opencontainers.image.title={{.ProjectName}}"
    - "--label=org.opencontainers.image.revision={{.FullCommit}}"
    - "--label=org.opencontainers.image.version={{.Version}}"
    - "--label=org.opencontainers.image.description={{ .ProjectName }}"
    - "--label=org.opencontainers.image.url=https://github.com/tbckr/{{ .ProjectName }}"
    - "--label=org.opencontainers.image.source=https://github.com/tbckr/{{ .ProjectName }}"
    - "--label=org.opencontainers.image.licenses=MIT"

docker_manifests:
- name_template: "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}.{{.Patch}}"
  image_templates:
  - "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}.{{.Patch}}-amd64"
  - "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}.{{.Patch}}-arm64"
- name_template: "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}"
  image_templates:
  - "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}-amd64"
  - "{{.Env.IMAGE_NAME}}:{{ .Major }}.{{.Minor}}-arm64"
- name_template: "{{.Env.IMAGE_NAME}}:{{ .Major }}"
  image_templates:
  - "{{.Env.IMAGE_NAME}}:{{ .Major }}-amd64"
  - "{{.Env.IMAGE_NAME}}:{{ .Major }}-arm64"
- name_template: "{{.Env.IMAGE_NAME}}:latest"
  image_templates:
  - "{{.Env.IMAGE_NAME}}:latest-amd64"
  - "{{.Env.IMAGE_NAME}}:latest-arm64"

archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of uname.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
    - goos: windows
      format: zip

gomod:
  proxy: true
  env:
    - GOPROXY=https://proxy.golang.org,direct
    - GOSUMDB=sum.golang.org

checksum:
  name_template: 'checksums.txt'

snapshot:
  name_template: "{{ incpatch .Version }}-next"

changelog:
  sort: asc
  use: github
  filters:
    exclude:
      - '^docs:'
      - '^test:'
      - '^chore'
      - 'merge conflict'
      - Merge pull request
      - Merge remote-tracking branch
      - Merge branch
      - go mod tidy
  groups:
    - title: Dependency updates
      regexp: '^.*?(feat|fix)\(deps\)!?:.+$'
      order: 300
    - title: 'New Features'
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 100
    - title: 'Bug fixes'
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 200
    - title: 'Documentation updates'
      regexp: ^.*?doc(\([[:word:]]+\))??!?:.+$
      order: 400
    - title: 'Build process updates'
      regexp: ^.*?build(\([[:word:]]+\))??!?:.+$
      order: 400
    - title: Other work
      order: 9999

# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj
